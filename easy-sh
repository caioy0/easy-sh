#!/bin/bash

distro=""
driver=""
skip_custominstall=false
skip_dotfiles=false

install_omz() {
    if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
        printf "[~] Installing Oh My Zsh...\n"
        echo "n" | RUNZSH=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    fi
}

install_zsh_plugins() {
    # path
    ZSH_CUSTOM="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"
    clone_if_not_exists "https://github.com/zsh-users/zsh-autosuggestions" "$ZSH_CUSTOM/plugins/zsh-autosuggestions"
    clone_if_not_exists "https://github.com/zsh-users/zsh-syntax-highlighting.git" "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting"
    clone_if_not_exists "https://github.com/unixorn/fzf-zsh-plugin.git" "$ZSH_CUSTOM/plugins/fzf-zsh-plugin"
    clone_if_not_exists "https://github.com/zdharma-continuum/fast-syntax-highlighting.git" "$ZSH_CUSTOM/plugins/fast-syntax-highlighting"
    clone_if_not_exists "https://github.com/romkatv/powerlevel10k.git" "$ZSH_CUSTOM/themes/powerlevel10k"
}

clone_if_not_exists() {
    local repo=$1
    local target=$2
    if [[ ! -d "$target" ]]; then
        git clone --depth=1 "$repo" "$target"
    else
        echo "[~] Already exists: $target"
    fi
}

safe_link() {
    local src=$1
    local dest=$2

    if [[ -e "$src" ]]; then
        ln -sf "$src" "$dest"
        echo "[✓] Link created: $dest → $src"
    else
        echo "[!] Warning!: File not found to create link: $src"
    fi
}

backup_file() {
    local target=$1
    local backup=$2

    if [[ -e "$target" ]]; then
        printf "Backup %s? [y/n]: " "$target"
        read -r answer
        if [[ "$answer" =~ ^[Yy]$ ]]; then
            cp -r "$target" "$backup"
            echo "[✓] Backup ready: $backup"
        fi
    fi
}

show_help() {
    echo "Usage: ./install.sh [options]"
    echo "Options:"
    echo "distro option"
    echo " -d | --debian"
    echo " -a | --arch"
    echo " -f | --fedora"
    echo " -m | --macos"
    echo ""
    echo " -w | --wsl                              WSL support"
    echo " -b | --only-dotfiles               copy dotfiles"
    echo " --skip-custominstall"
    echo " --skip-dotfiles"
}

copy_dotfiles(){
    if [[ ! -d "$HOME/dotfiles" ]]; then
    cp -rf "dotfiles/" "$HOME"
else
    echo "[~] Updating dotfiles..."
    sleep 1
    cp -rf "dotfiles/" "$HOME"
    if [[ ! -d "$HOME/.config" ]]; then
        mkdir -p "$HOME/.config"
    fi
fi
}

# oh-my-zsh install 
install_omz
install_zsh_plugins

while [ $# -gt 0 ]; do
    case "$1" in 
        -w | --wsl)
            echo "feature not ready" 
            exit 0
        ;;
        -d | --debian)
            distro="debian"
            printf "os: $distro\n"
            sleep 1
            bash ./deb-base/apps.sh
            shift
        ;;
        -a | --arch)
            distro="arch"
            printf "os: $distro\n"
            sleep 1
            bash ./arch-base/apps.sh
        ;;
        -f | --fedora)
            distro="fedora"
            printf "os: $distro\n"
            sleep 1
            bash ./fed-base/apps.sh
        ;;
        -m | --macos)
            distro="macos"
            printf "os: $distro\n"
            sleep 1
            bash ./macos-darwin/apps.sh
        ;;
        -b | --only-dotfiles)
            distro="no-distro"
            echo "feature not ready"
        ;;
        --skip-dotfiles)
            skip_dotfiles=true
        ;;
        --skip-custominstall)
            skip_custominstall=true
        ;;
        --help | -h)
            show_help
            exit 0
        ;;
    *)
        echo "unknown arg(s): $1"
        exit 1
        ;;
    esac
    shift
done

if [ "$skip_dotfile" = true ]; then
    printf "\nThats it ༼ つ ◕_◕ ༽つ \n"
    exit 0
fi


# backup .zshrc
backup_file "$HOME/.zshrc" "$HOME/.zshrc.bak"
# backup .bashrz
backup_file "$HOME/.bashrc" "$HOME/.config.bashrc"
# backup .config
backup_file "$HOME/.config" "$HOME/.config.bak"

# dotfiles
copy_dotfiles

# links
safe_link "$HOME/dotfiles/.zshrc" "$HOME/.zshrc"
safe_link "$HOME/dotfiles/.bashrc" "$HOME/.bashrc"
safe_link "$HOME/dotfiles/.config/kitty" "$HOME/.config/kitty"
safe_link "$HOME/dotfiles/.config/nvim/" "$HOME/.config/nvim"
safe_link "$HOME/dotfiles/.config/fastfetch/" "$HOME/.config/fastfetch"
safe_link "$HOME/dotfiles/.config/spotfyd/" "$HOME/.config/spotifyd"

if [ "$distro" = "arch" ]; then
    safe_link "$HOME/dotfiles/.config/hypr/" "$HOME/.config/hypr"
    safe_link "$HOME/dotfiles/.config/waybar/" "$HOME/.config/waybar"
    safe_link "$HOME/dotfiles/.config/waypaper/" "$HOME/.config/waypaper"
    safe_link "$HOME/dotfiles/.config/matugen/" "$HOME/.config/matugen"
fi


printf "\nThats it ༼ つ ◕_◕ ༽つ \n"